// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// B_numeraire_Call
double B_numeraire_Call(int n_steps, double S, double K, double sigma, double r, double T);
RcppExport SEXP _KWAENFInR_B_numeraire_Call(SEXP n_stepsSEXP, SEXP SSEXP, SEXP KSEXP, SEXP sigmaSEXP, SEXP rSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_steps(n_stepsSEXP);
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(B_numeraire_Call(n_steps, S, K, sigma, r, T));
    return rcpp_result_gen;
END_RCPP
}
// parallelVectorSum
double parallelVectorSum(NumericVector x);
RcppExport SEXP _KWAENFInR_parallelVectorSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelVectorSum(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_KWAENFInR_B_numeraire_Call", (DL_FUNC) &_KWAENFInR_B_numeraire_Call, 6},
    {"_KWAENFInR_parallelVectorSum", (DL_FUNC) &_KWAENFInR_parallelVectorSum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_KWAENFInR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
